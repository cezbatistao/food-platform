// Code generated by MockGen. DO NOT EDIT.
// Source: app/gateway/order_gateway.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	domain "github.com/cezbatistao/food-platform/food-order/app/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrderGateway is a mock of OrderGateway interface.
type MockOrderGateway struct {
	ctrl     *gomock.Controller
	recorder *MockOrderGatewayMockRecorder
}

// MockOrderGatewayMockRecorder is the mock recorder for MockOrderGateway.
type MockOrderGatewayMockRecorder struct {
	mock *MockOrderGateway
}

// NewMockOrderGateway creates a new mock instance.
func NewMockOrderGateway(ctrl *gomock.Controller) *MockOrderGateway {
	mock := &MockOrderGateway{ctrl: ctrl}
	mock.recorder = &MockOrderGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderGateway) EXPECT() *MockOrderGatewayMockRecorder {
	return m.recorder
}

// GetByUuid mocks base method.
func (m *MockOrderGateway) GetByUuid(ctx context.Context, orderUuid *uuid.UUID) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", ctx, orderUuid)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockOrderGatewayMockRecorder) GetByUuid(ctx, orderUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockOrderGateway)(nil).GetByUuid), ctx, orderUuid)
}

// Save mocks base method.
func (m *MockOrderGateway) Save(ctx context.Context, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockOrderGatewayMockRecorder) Save(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderGateway)(nil).Save), ctx, order)
}

// SaveWithTx mocks base method.
func (m *MockOrderGateway) SaveWithTx(ctx context.Context, tx *sql.Tx, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithTx", ctx, tx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveWithTx indicates an expected call of SaveWithTx.
func (mr *MockOrderGatewayMockRecorder) SaveWithTx(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithTx", reflect.TypeOf((*MockOrderGateway)(nil).SaveWithTx), ctx, tx, order)
}

// Update mocks base method.
func (m *MockOrderGateway) Update(ctx context.Context, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrderGatewayMockRecorder) Update(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderGateway)(nil).Update), ctx, order)
}

// UpdateWithTx mocks base method.
func (m *MockOrderGateway) UpdateWithTx(ctx context.Context, tx *sql.Tx, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", ctx, tx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockOrderGatewayMockRecorder) UpdateWithTx(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockOrderGateway)(nil).UpdateWithTx), ctx, tx, order)
}
