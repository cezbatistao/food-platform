// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gateway/order_send_gateway.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/cezbatistao/food-platform/food-order/internal/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderSendGateway is a mock of OrderSendGateway interface.
type MockOrderSendGateway struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSendGatewayMockRecorder
}

// MockOrderSendGatewayMockRecorder is the mock recorder for MockOrderSendGateway.
type MockOrderSendGatewayMockRecorder struct {
	mock *MockOrderSendGateway
}

// NewMockOrderSendGateway creates a new mock instance.
func NewMockOrderSendGateway(ctrl *gomock.Controller) *MockOrderSendGateway {
	mock := &MockOrderSendGateway{ctrl: ctrl}
	mock.recorder = &MockOrderSendGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSendGateway) EXPECT() *MockOrderSendGatewayMockRecorder {
	return m.recorder
}

// SendCancelled mocks base method.
func (m *MockOrderSendGateway) SendCancelled(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCancelled", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCancelled indicates an expected call of SendCancelled.
func (mr *MockOrderSendGatewayMockRecorder) SendCancelled(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCancelled", reflect.TypeOf((*MockOrderSendGateway)(nil).SendCancelled), ctx, order)
}

// SendCreated mocks base method.
func (m *MockOrderSendGateway) SendCreated(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCreated", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCreated indicates an expected call of SendCreated.
func (mr *MockOrderSendGatewayMockRecorder) SendCreated(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreated", reflect.TypeOf((*MockOrderSendGateway)(nil).SendCreated), ctx, order)
}

// SendProcessing mocks base method.
func (m *MockOrderSendGateway) SendProcessing(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProcessing", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendProcessing indicates an expected call of SendProcessing.
func (mr *MockOrderSendGatewayMockRecorder) SendProcessing(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProcessing", reflect.TypeOf((*MockOrderSendGateway)(nil).SendProcessing), ctx, order)
}

// SendShipped mocks base method.
func (m *MockOrderSendGateway) SendShipped(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendShipped", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendShipped indicates an expected call of SendShipped.
func (mr *MockOrderSendGatewayMockRecorder) SendShipped(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendShipped", reflect.TypeOf((*MockOrderSendGateway)(nil).SendShipped), ctx, order)
}
